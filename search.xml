<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++文件操作与文件流]]></title>
    <url>%2F2018%2F05%2F15%2FC-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%96%87%E4%BB%B6%E6%B5%81%2F</url>
    <content type="text"><![CDATA[C++文件操作与文件流：较为详细的总结 头函数#include&lt;fstream&gt; 文件流类与文件流对象文件流类 文件流类 描述 ifstream 支持从磁盘文件向缓冲区输入 ofstream 支持从缓冲区向磁盘文件输入 fstream 支持对磁盘文件的输入输出 文件流对象定义一个文件流对象fstream fileclass;ofstream fileclass;ifstream fileclass; 文件的打开与关闭文件的打开调用成员函数openfilecalss.open(&quot;文件名&quot;，输入输出方式); 定义文件流对象时指定参数fstream fileclass(&quot;文件名&quot;，输入输出方式); 输入输出方式可以用按位与|的方式组合 输入输出方式设置值 作用 ios::in 以输入方式打开文件 ios::out 以输出方式创建并打开文件，若有此名文件则清空该文件 ios::app 以输入方式打开文件，写入的数据添加到文件末尾 ios::ate 打开一个已有文件，并将文件指针指向末尾 ios::trunc 存在文件则删除文件原内容，不存在则新建文件 ios::binary 以二进制方式打开文件，默认为ASCll方式打开 ios::nocreate 打开已有文件，若文件不存在则打开失败 ios::noreplace 文件若不存在则建立文件，文集存在则操作失败 文件的关闭调用成员函数关闭文件fileclass.close() 本操作实际是接触文件与文件流的关系 对ASCll文件的操作1-使用 &lt;&lt; 与 &gt;&gt; 即可2-使用put get getline 等成员函数 对二进制文件的操作读写使用成员函数读 : fileclass.read(字符指针，字节数)写 : fileclass.write(字符指针，字节数) 与文件指针有关的流成员函数 成员函数 作用 gcount() 得到最后一次输入所读入的字节数 tellg() 得到输入文件位置标记的当前位置 tellp() 得到输出文件位置标记的当前位置 seekg(文件位置) 将输入文件跳转到指定位置 seekg(位移量，参照位置) 将输入文件按参照位置和位移量移动 seekp(文件位置) 将输出文件跳转到指定位置 seekp(位移量，参照位置) 将输出文件按参照位置和位移量移动 参照位置 位置 ios::beg 文件开头（默认值） ios::cur 当前位置 ios::end 文件末尾]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[超详细：建立属于自己的网站]]></title>
    <url>%2F2018%2F05%2F11%2F%E5%BB%BA%E7%AB%8B%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[你准备好了吗？ 开始的开始首先我们需要一台电脑其次我们有些地方可能需要科学上网可能有的地方会卡住你，但是请不要轻言放弃可能你会面对一堆你看不懂的代码或者其他乱起八糟的东西，但是请不要知难而退希望你能享受当一个站长的时光未来的站长你准备好了吗？Let’s do it!! 我们的工具-git-Hexo-Github pages 下载并部署我们需要的工具下载首先，我们需要下载git和Node.js git官网 (注意，如果没有科学上网可能下载速度会比较慢) Node.js官网 windows安装git教程 (步骤可能比较繁琐，也会遇到命令框，但是加油看下去，一步一步来总会成功) windows安装Node.js教程 配置本地git安装好git后我们需要告诉git你是谁，所以我们右键桌面，打开Git Bash Here -执行 git conflg--global user.name&quot;Your Name&quot; Your Name处填写你的昵称-执行 git conflg--global user.email&quot;Your email&quot; Your email处填写你的邮箱 学习git的基础用法或许你想说，啥是git?????? git是一个分散式版本管理器。可能讲到这里你就蒙了，其实git就是一个文件的账本，你的每一次修改都会被寄到这个“账本”里，它会记住你每一次修改了文件里的什么、新增的文件、删除的文件。如果你哪天反悔了自己之前的修改，你可以通过git来翻旧账，恢复以前的版本。当然更重要的是它的分散管理，这点初学小白就不用知道太多了。 我相信你已经把git安装到你的电脑上了，我们来学习几个重要的git指令。 新建一个新的文件夹，在新的文件夹里按右键，点击那个“Git Bash Here” 欢迎来到黑洞洞的命令框。下面是一些我们常用的git指令 -cd xxxxx 这个指令可以让你打开在这个文件夹里叫xxxxx的子文件夹-git init 这个指令会在这个文件夹中初始化本地仓库，这样你的这个文件夹就有了git仓库(master是你主分支)-git add . 注意最后有个“.”，这个是将本地文件加到仓库里，就相当于开始记账了，“.”是代表这个文件夹里的所有文件，如果你只想添加一个文件，请把这个“.”换成那个文件的文件名 (这个文件需要在当前的文件夹内才可以) -git commit -m&quot;XXXXXX&quot; 这个指令通常和上面那个一起用，git add .只是记上了“这笔帐”，我们这条指令的目的是确定这笔账的存在，如果没有这个指令的话，你的文件修改不会被保存在git仓库里，XXXXXXX是你对这次修改文件的描述，建议一定要填写-git remote add origin git@github.com:YourUserName:YourRepositoriesName.git 这是将本地仓库链接到远程github仓库，如果不明白可以暂时跳过，下面还会再讲-git push -f origin master 将文件push到远程仓库，如果不明白可以暂时跳过，下面还会再讲 (注意，命令框里的复制粘贴不是Ctru+C和Ctru+V!!!) (git指令可能执行的比较慢，请一定等到git反馈并弹出彩色的显示你当前文件路径的语句后才能输入并执行下一条指令，如下图) 安装Hexo首先我们需要新建一个文件夹，叫什么随意，但是最好是英文的，这样会比较方便你在命令框下打开你的文件夹。为了方便我之后的讲解，我暂且觉得你的这个文件夹叫web 打开web文件夹，右键进入Git Bash -执行 npm install -g hexo cli 初始化框架-执行 hexo init blog 你会发现web文件夹下多了一个叫blog的文件夹-执行 cd blog 我们用git打开这个blog文件夹-执行 npm install 至此，我们拥有了一个网站的框架在blog文件夹中 我们来看一看blog文件夹里都有点什么-scaffolds 模板文件夹-source 资源文件夹，你网站的资源全部存放于此-theme 主题文件夹，hexo通过这个给你的主页设置主题-_config.yml 网站的配置信息，在此你可以设置一些参数-package.json 不用管它 （其实我也不知道干啥用的） 部署Hexo并生成\预览网页-执行 hexo new &quot;XXXXXXX&quot; 新建你的文章，XXXXXXX是你的文章名字，之后你可以在source/_posts里看到“XXXXXXX.md”的文件，你可以通过编辑这个文件来写你要发布的东西。 （.md文件就是Markdown的缩写，它是一种很方便的轻量化标记语言，它的具体用法和.txt基本一样，但是却可以产生更好的书写效果，更多md用法请看我关于Markdown的帮助文档，你可以在分类中找到它们） -执行 hexo g 这条指令会通过你blog文件夹下的文件建立静态网站-执行 hexo s 这条指令会启动本地服务器，在浏览器中输入 http://localhost:4000/ 就可以预览你建立的静态网站 (本地服务器不需要连接互联网就可以预览) 赶快通过上面的三个指令看看你网站的样子吧！ (git指令可能执行的比较慢，请一定等到git反馈并弹出彩色的显示你当前文件路径的语句后才能输入并执行下一条指令) (hexo s 指令执行后，你需要手动结束这条指令，结束方式是在命令行里输入Ctrl+C) 全球最大同性交友网站：Github什么是Github?GitHub是通过Git进行版本控制的软件源代码托管服务。相当于一个远程的git仓库，你甚至可以把任何文件上传github，让github成为你的云盘。同时Github还提供了一系列社交网络具有的功能，例如赞、关注、评论。用户可以通过复刻他人项目的形式参与开发，并可通过协作示意图来查看有多少开发者参与了开发并追踪最新的复刻版本。 你可以在Github上找到很多程序猿小哥哥。 我的Github主页 我们为什么使用Github？因为我们的网站需要一个服务器，Github pages可以给我们提供一个独立的、免费的、方便的服务器，因此我们需要使用Github。 注册Github账号Github官网 点击页面右上角 sign up 填写你的昵称，邮箱(务必保持邮箱可用)和密码。 最后一步是选择你的职业还有研究方向之类的，按照自己的情况选择就可以了。（实在不会选就随便选） 创建Github仓库在此之前，你需要去你的邮箱里通过Github给你发的链接来激活你的Github账号。 回到Github主页。 你需要把“YourGithubName”换为你Github的昵称。这时你就有了第一个Github仓库！ 将本地Git仓库链接到Github创建Git公钥打开”Git Bash” 1-执行 cd ~/.ssh(如果显示 ...No such file or directory 请跳过第2步直接执行第3步)2-执行 mkdir key_buckup mv id_isa* key_backup3-执行 ssh-keygen -t rsa -C &quot;your email&quot; 输出显示：&gt;Generating public/private rsa key pair. Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;press enter&gt; 请直接回车！！ 4-输出显示：&gt;Enter passphrase (empty for no passphrase):&lt;enter a passphrase&gt;Enter same passphrase again:&lt;enter passphrase again&gt; 设置一个密码，这个密码在每次远程操作时都要输入。如果怕忘记密码或者嫌麻烦不想输密码，可以直接回车，不设置密码。 5-成功后显示：Your identification has been saved in /Users/your_user_directory/.ssh/id_rsa. Your public key has been saved in /Users/your_user_directory/.ssh/id_rsa.pub. The key fingerprint is: ... ... 6-请根据显示的文件路径 /Users/your_user_directory/.ssh/id_rsa.pub 找到你的.ssh文件夹，用文本编辑器打开id_rsa.pub文件，复制所有内容。 7-进入 https://github.com/settings/keys 点击Add SSH Key,把复制的内容粘贴进去。 上传自己的网站我相信你已经在blog文件夹中尝试过使用hexo g和hexo s命令了。你会发现你的blog文件夹中多了一个public文件夹，这个文件夹就是我们要上传到服务器上的文件夹。 打开public文件夹，右键运行Git Bash。 -执行 git init-执行 git add .-执行 git commit -m&quot;XXXXXX&quot; 还记得 学习git的基础用法 中我说可以跳过的那两条命令吗？我们现在需要用它们了。 -执行 git remote add origin git@github.com:YourUserName:YourRepositoriesName.git（把YourUserName改成你的昵称，把YourRepositoriesName改成YourUserName.github.io）（这步的目的就是将你本地的Git仓库链接到Github上）（仓库与仓库的链接只用链接一次，以后上传文件就不用链接了） -执行 git push -f origin master（这步就是把本地git仓库里的东东上传到Github仓库里） 在浏览器中输入YourUserName.github.io就可以访问你的网站了。 以后以后修改自己的网站，先在本地修改.然后再blog文件夹下执行hexo g接着再public文件夹下进行git命令三步走 -执行 git add .-执行 git commit -m&quot;XXXXXX&quot; (把XXXXXXX改成你对这次修改的描述)-执行 git push -f origin master 这样你的Github仓库就和本地仓库同步了。 拥有一个自己的域名购买域名万网 首先你可以在万网上购买域名，万网是阿里旗下的，所以你可以使用淘宝账号登陆。 域名解析Dnspod 使用Dnspod来进行域名dns解析。 1-注册Dnspod账号2-进入主控台把你刚刚购买的域名添加进去 3-添加纪录记录值请写成 YourGithubName.github.io.,其余的按照我红框框中的去写 4-回到万网域名控制台,点击管理 5-修改DNS将DNS修改为f1g1ns1.dnspod.net和f1g1ns2.dnspod.net 6-在本地public文件夹下建立CNAME文件，用文本编辑器打开，输入你购买的域名。使用git三步走推送至Github仓库。7-一般半个小时之后你就可以通过你的域名访问你的网站了！ 恭喜你成功的做出了自己的网站！！！！相关链接Hexo官网NexT主题]]></content>
      <categories>
        <category>建站</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown-字体\颜色\大小]]></title>
    <url>%2F2018%2F05%2F10%2FMarkdown-%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E5%A4%A7%E5%B0%8F%2F</url>
    <content type="text"><![CDATA[如何用markdown编辑文字字体、颜色与大小 字体1&lt;font face=&quot;字体&quot;&gt; XXXXXX &lt;/font&gt; 颜色 \ 大小1&lt;font color=16进制数 size=3 &gt; XXXXXXXX &lt;/font&gt; 默认大小为3。 颜色名 十六进制颜色值 例子 浅粉色 #FFB6C1 XXXXXXXX 粉红 #FFC0CB XXXXXXXX 猩红 #DC143C XXXXXXXX 淡紫色 #FFF0F5 XXXXXXXX 紫罗兰红色 #DB7093 XXXXXXXX 热情粉红 #FF69B4 XXXXXXXX 深粉色 #FF1493 XXXXXXXX 紫罗兰红色 #C71585 XXXXXXXX 兰花的紫色 #DA70D6 XXXXXXXX 蓟 #D8BFD8 XXXXXXXX 李子 #DDA0DD XXXXXXXX 紫罗兰 #EE82EE XXXXXXXX 洋红 #FF00FF XXXXXXXX 灯笼海棠 #FF00FF XXXXXXXX 深洋红色 #8B008B XXXXXXXX 紫色 #800080 XXXXXXXX 中兰花紫 #BA55D3 XXXXXXXX 深紫罗兰色 #9400D3 XXXXXXXX 深兰花紫 #9932CC XXXXXXXX 靛青 #4B0082 XXXXXXXX 深紫罗兰蓝 #8A2BE2 XXXXXXXX 中紫色 #9370DB XXXXXXXX 中板岩暗蓝灰 #7B68EE XXXXXXXX 板岩暗蓝灰 #6A5ACD XXXXXXXX 深岩暗蓝灰 #483D8B XXXXXXXX 薰衣草花淡紫 #E6E6FA XXXXXXXX 幽灵白 #F8F8FF XXXXXXXX 纯蓝 #0000FF XXXXXXXX 中蓝色 #0000CD XXXXXXXX 午夜蓝 #191970 XXXXXXXX 深蓝色 #00008B XXXXXXXX 海军蓝 #000080 XXXXXXXX 宝蓝 #4169E1 XXXXXXXX 矢车菊蓝 #6495ED XXXXXXXX 淡钢蓝 #B0C4DE XXXXXXXX 浅石板灰 #778899 XXXXXXXX 石板灰 #708090 XXXXXXXX 道奇蓝 #1E90FF XXXXXXXX 爱丽丝蓝 #F0F8FF XXXXXXXX 钢蓝 #4682B4 XXXXXXXX 淡蓝色 #87CEFA XXXXXXXX 天蓝色 #87CEEB XXXXXXXX 深天蓝 #00BFFF XXXXXXXX 淡蓝 #ADD8E6 XXXXXXXX 火药蓝 #B0E0E6 XXXXXXXX 军校蓝 #5F9EA0 XXXXXXXX 蔚蓝色 #F0FFFF XXXXXXXX 淡青色 #E1FFFF XXXXXXXX 苍白绿宝石 #AFEEEE XXXXXXXX 青色 #00FFFF XXXXXXXX 水绿色 #00FFFF XXXXXXXX 深绿宝石 #00CED1 XXXXXXXX 深石板灰 #2F4F4F XXXXXXXX 深青色 #008B8B XXXXXXXX 水鸭色 #008080 XXXXXXXX 中绿宝石 #48D1CC XXXXXXXX 浅海洋绿 #20B2AA XXXXXXXX 绿宝石 #40E0D0 XXXXXXXX 绿玉 #7FFFAA XXXXXXXX 中碧绿色 #00FA9A XXXXXXXX 中春天绿 #F5FFFA XXXXXXXX 薄荷奶油 #00FF7F XXXXXXXX 春天绿 #3CB371 XXXXXXXX 海洋绿 #2E8B57 XXXXXXXX 蜂蜜 #F0FFF0 XXXXXXXX 淡绿色 #90EE90 XXXXXXXX 苍白绿 #98FB98 XXXXXXXX 深海洋绿 #8FBC8F XXXXXXXX 酸橙绿 #32CD32 XXXXXXXX 酸橙色 #00FF00 XXXXXXXX 森林绿 #228B22 XXXXXXXX 纯绿 #008000 XXXXXXXX 深绿色 #006400 XXXXXXXX 查特酒绿 #7FFF00 XXXXXXXX 草坪绿 #7CFC00 XXXXXXXX 绿黄色 #ADFF2F XXXXXXXX 橄榄土褐色 #556B2F XXXXXXXX 米色 #6B8E23 XXXXXXXX 浅秋麒麟黄 #FAFAD2 XXXXXXXX 象牙色 #FFFFF0 XXXXXXXX 浅黄色 #FFFFE0 XXXXXXXX 纯黄 #FFFF00 XXXXXXXX 橄榄 #808000 XXXXXXXX 深卡其布 #BDB76B XXXXXXXX 柠檬薄纱 #FFFACD XXXXXXXX 灰秋麒麟 #EEE8AA XXXXXXXX 卡其布 #F0E68C XXXXXXXX 金 #FFD700 XXXXXXXX 玉米色 #FFF8DC XXXXXXXX 秋麒麟 #DAA520 XXXXXXXX 花白 #FFFAF0 XXXXXXXX 老饰带 #FDF5E6 XXXXXXXX 小麦色 #F5DEB3 XXXXXXXX 鹿皮鞋 #FFE4B5 XXXXXXXX 橙色 #FFA500 XXXXXXXX 番木瓜 #FFEFD5 XXXXXXXX 漂白杏仁 #FFEBCD XXXXXXXX Navajo白 #FFDEAD XXXXXXXX 古代白 #FAEBD7 XXXXXXXX 晒黑 #D2B48C XXXXXXXX 结实的树 #DEB887 XXXXXXXX 深橙色 #FF8C00 XXXXXXXX 亚麻布 #FAF0E6 XXXXXXXX 秘鲁 #CD853F XXXXXXXX 桃色 #FFDAB9 XXXXXXXX 沙棕色 #F4A460 XXXXXXXX 巧克力 #D2691E XXXXXXXX 马鞍棕色 #8B4513 XXXXXXXX 海贝壳 #FFF5EE XXXXXXXX 黄土赭色 #A0522D XXXXXXXX 浅鲜肉色 #FFA07A XXXXXXXX 珊瑚 #FF7F50 XXXXXXXX 橙红色 #FF4500 XXXXXXXX 深鲜肉色 #E9967A XXXXXXXX 番茄 #FF6347 XXXXXXXX 薄雾玫瑰 #FFE4E1 XXXXXXXX 鲜肉色 #FA8072 XXXXXXXX 雪 #FFFAFA XXXXXXXX 淡珊瑚色 #F08080 XXXXXXXX 玫瑰棕色 #BC8F8F XXXXXXXX 印度红 #CD5C5C XXXXXXXX 纯红 #FF0000 XXXXXXXX 棕色 #A52A2A XXXXXXXX 耐火砖 #B22222 XXXXXXXX 深红色 #8B0000 XXXXXXXX 栗色 #800000 XXXXXXXX 纯白 #FFFFFF XXXXXXXX 白烟 #F5F5F5 XXXXXXXX Gainsboro #DCDCDC XXXXXXXX 浅灰色 #D3D3D3 XXXXXXXX 银白色 #C0C0C0 XXXXXXXX 深灰色 #A9A9A9 XXXXXXXX 灰色 #808080 XXXXXXXX 暗淡灰 #696969 XXXXXXXX]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[链表]]></title>
    <url>%2F2018%2F05%2F08%2F%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[链表这个东西很奇妙！ 如果哪里写的不好，希望可以去Github上发给我。Github ：link 1234567891011121314151617181920212223242526272829303132#ifndef LINK_H_#define LINK_H_ /** Copyright(c) 2018, KUN* All rights reserved.* 版本 1.0* 文件 链表* 使用方法 见文件* 完成日期 2018/05/04*///*************************************************************************************struct Link&#123; int obj; Link *next;&#125;;//*************************************************************************************Link MYLINK(int N); //建立长度为N的链表Link INSERT(Link&amp; HAND, int N, Link&amp; IN); //在N位置插入一个节点Link INSERT(Link&amp; HAND, Link&amp; IN, int N); //在N位置插入一个链表bool DELETE(Link&amp;, int ST, int FI); //删除ST位置至FI位置的节点int INQUIRE(Link, int N); //查询N位置节点的数据bool CHANGE(Link&amp;, int N, int OBJ); //更改N位置节点的数据//*************************************************************************************#endifcode 上述是关于链表需要使用的函数的函数声明，下面是上述函数的实现代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;stdlib.h&gt;#include"link.h"//*************************************************************************************Link MYLINK(int N)&#123; int i; Link HAND; Link TEMP; N -= 1; HAND.next = (Link*)malloc((int)(sizeof(int) + sizeof(Link*))); TEMP.next = HAND.next; for (i = 1; i &lt; N; i++) &#123; TEMP.next-&gt;next = (Link*)malloc((int)(sizeof(int) + sizeof(Link*))); TEMP.next = TEMP.next-&gt;next; &#125; return HAND;&#125;//建立长度为N的链表//*************************************************************************************Link INSERT(Link&amp; HAND, int N, Link&amp; IN)&#123; int num; Link TEMP; Link* temp; temp = NULL; TEMP = HAND; for (num = 0; num &lt; N + 1; num++) &#123; if (num = N - 1) &#123; temp = TEMP.next; TEMP.next = &amp;IN; &#125; if (num = N) IN.next = temp; TEMP.next = TEMP.next-&gt;next; &#125; return HAND;&#125;//在N位置插入一个节点//*************************************************************************************Link INSERT(Link&amp; HAND, Link&amp; IN, int N)&#123; int num; Link TEMP; Link* temp; TEMP = HAND; for (num = 1; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; temp = TEMP.next; TEMP.next = &amp;IN; for (; TEMP.next == NULL;) TEMP.next = TEMP.next-&gt;next; TEMP.next = temp; return HAND;&#125;//在N位置插入一个链表//*************************************************************************************bool DELETE(Link&amp; HAND, int ST, int FI)&#123; int num; Link TEMP, TEMP_FI; TEMP = HAND; for (num = 1; num &lt; ST; num++) TEMP.next = TEMP.next-&gt;next; TEMP_FI = TEMP; for (; num&lt;FI; num++) TEMP.next = TEMP.next-&gt;next; TEMP_FI.next = TEMP.next; return 1;&#125;//删除ST位置至FI位置的节点//*************************************************************************************int INQUIRE(Link HAND, int N)&#123; int num; Link TEMP; TEMP = HAND; for (num = 1; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; return TEMP.obj;&#125;//查询N位置节点的数据//*************************************************************************************bool CHANGE(Link&amp; HAND, int N, int OBJ)&#123; int num; Link TEMP; TEMP = HAND; if (N == 1) HAND.obj = OBJ; if (N != 1) &#123; for (num = 2; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; TEMP.next-&gt;obj = OBJ; &#125; return 1;&#125;//更改N位置节点的数据 /* * Copyright(c) 2018, KUN * All rights reserved. * 版本 1.0 * 文件 链表 * 使用方法 见文件 * 完成日期 2018/05/04 * 头文件 link.h */code]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
