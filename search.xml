<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown-字体\颜色\大小]]></title>
    <url>%2F2018%2F05%2F10%2Fpost-C-%E4%BD%9C%E4%B8%9A%20-%20%E5%89%AF%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[如何用markdown编辑文字字体、颜色与大小 字体1&lt;font face=&quot;字体&quot;&gt; XXXXXX &lt;/font&gt; 颜色 \ 大小1&lt;font color=16进制数 size=3 &gt; XXXXXXXX &lt;/font&gt; 默认大小为3。 颜色名 十六进制颜色值 例子 浅粉色 #FFB6C1 XXXXXXXX 粉红 #FFC0CB XXXXXXXX 猩红 #DC143C XXXXXXXX 淡紫色 #FFF0F5 XXXXXXXX 紫罗兰红色 #DB7093 XXXXXXXX 热情粉红 #FF69B4 XXXXXXXX 深粉色 #FF1493 XXXXXXXX 紫罗兰红色 #C71585 XXXXXXXX 兰花的紫色 #DA70D6 XXXXXXXX 蓟 #D8BFD8 XXXXXXXX 李子 #DDA0DD XXXXXXXX 紫罗兰 #EE82EE XXXXXXXX 洋红 #FF00FF XXXXXXXX 灯笼海棠 #FF00FF XXXXXXXX 深洋红色 #8B008B XXXXXXXX 紫色 #800080 XXXXXXXX 中兰花紫 #BA55D3 XXXXXXXX 深紫罗兰色 #9400D3 XXXXXXXX 深兰花紫 #9932CC XXXXXXXX 靛青 #4B0082 XXXXXXXX 深紫罗兰蓝 #8A2BE2 XXXXXXXX 中紫色 #9370DB XXXXXXXX 中板岩暗蓝灰 #7B68EE XXXXXXXX 板岩暗蓝灰 #6A5ACD XXXXXXXX 深岩暗蓝灰 #483D8B XXXXXXXX 薰衣草花淡紫 #E6E6FA XXXXXXXX 幽灵白 #F8F8FF XXXXXXXX 纯蓝 #0000FF XXXXXXXX 中蓝色 #0000CD XXXXXXXX 午夜蓝 #191970 XXXXXXXX 深蓝色 #00008B XXXXXXXX 海军蓝 #000080 XXXXXXXX 宝蓝 #4169E1 XXXXXXXX 矢车菊蓝 #6495ED XXXXXXXX 淡钢蓝 #B0C4DE XXXXXXXX 浅石板灰 #778899 XXXXXXXX 石板灰 #708090 XXXXXXXX 道奇蓝 #1E90FF XXXXXXXX 爱丽丝蓝 #F0F8FF XXXXXXXX 钢蓝 #4682B4 XXXXXXXX 淡蓝色 #87CEFA XXXXXXXX 天蓝色 #87CEEB XXXXXXXX 深天蓝 #00BFFF XXXXXXXX 淡蓝 #ADD8E6 XXXXXXXX 火药蓝 #B0E0E6 XXXXXXXX 军校蓝 #5F9EA0 XXXXXXXX 蔚蓝色 #F0FFFF XXXXXXXX 淡青色 #E1FFFF XXXXXXXX 苍白绿宝石 #AFEEEE XXXXXXXX 青色 #00FFFF XXXXXXXX 水绿色 #00FFFF XXXXXXXX 深绿宝石 #00CED1 XXXXXXXX 深石板灰 #2F4F4F XXXXXXXX 深青色 #008B8B XXXXXXXX 水鸭色 #008080 XXXXXXXX 中绿宝石 #48D1CC XXXXXXXX 浅海洋绿 #20B2AA XXXXXXXX 绿宝石 #40E0D0 XXXXXXXX 绿玉 #7FFFAA XXXXXXXX 中碧绿色 #00FA9A XXXXXXXX 中春天绿 #F5FFFA XXXXXXXX 薄荷奶油 #00FF7F XXXXXXXX 春天绿 #3CB371 XXXXXXXX 海洋绿 #2E8B57 XXXXXXXX 蜂蜜 #F0FFF0 XXXXXXXX 淡绿色 #90EE90 XXXXXXXX 苍白绿 #98FB98 XXXXXXXX 深海洋绿 #8FBC8F XXXXXXXX 酸橙绿 #32CD32 XXXXXXXX 酸橙色 #00FF00 XXXXXXXX 森林绿 #228B22 XXXXXXXX 纯绿 #008000 XXXXXXXX 深绿色 #006400 XXXXXXXX 查特酒绿 #7FFF00 XXXXXXXX 草坪绿 #7CFC00 XXXXXXXX 绿黄色 #ADFF2F XXXXXXXX 橄榄土褐色 #556B2F XXXXXXXX 米色 #6B8E23 XXXXXXXX 浅秋麒麟黄 #FAFAD2 XXXXXXXX 象牙色 #FFFFF0 XXXXXXXX 浅黄色 #FFFFE0 XXXXXXXX 纯黄 #FFFF00 XXXXXXXX 橄榄 #808000 XXXXXXXX 深卡其布 #BDB76B XXXXXXXX 柠檬薄纱 #FFFACD XXXXXXXX 灰秋麒麟 #EEE8AA XXXXXXXX 卡其布 #F0E68C XXXXXXXX 金 #FFD700 XXXXXXXX 玉米色 #FFF8DC XXXXXXXX 秋麒麟 #DAA520 XXXXXXXX 花白 #FFFAF0 XXXXXXXX 老饰带 #FDF5E6 XXXXXXXX 小麦色 #F5DEB3 XXXXXXXX 鹿皮鞋 #FFE4B5 XXXXXXXX 橙色 #FFA500 XXXXXXXX 番木瓜 #FFEFD5 XXXXXXXX 漂白杏仁 #FFEBCD XXXXXXXX Navajo白 #FFDEAD XXXXXXXX 古代白 #FAEBD7 XXXXXXXX 晒黑 #D2B48C XXXXXXXX 结实的树 #DEB887 XXXXXXXX 深橙色 #FF8C00 XXXXXXXX 亚麻布 #FAF0E6 XXXXXXXX 秘鲁 #CD853F XXXXXXXX 桃色 #FFDAB9 XXXXXXXX 沙棕色 #F4A460 XXXXXXXX 巧克力 #D2691E XXXXXXXX 马鞍棕色 #8B4513 XXXXXXXX 海贝壳 #FFF5EE XXXXXXXX 黄土赭色 #A0522D XXXXXXXX 浅鲜肉色 #FFA07A XXXXXXXX 珊瑚 #FF7F50 XXXXXXXX 橙红色 #FF4500 XXXXXXXX 深鲜肉色 #E9967A XXXXXXXX 番茄 #FF6347 XXXXXXXX 薄雾玫瑰 #FFE4E1 XXXXXXXX 鲜肉色 #FA8072 XXXXXXXX 雪 #FFFAFA XXXXXXXX 淡珊瑚色 #F08080 XXXXXXXX 玫瑰棕色 #BC8F8F XXXXXXXX 印度红 #CD5C5C XXXXXXXX 纯红 #FF0000 XXXXXXXX 棕色 #A52A2A XXXXXXXX 耐火砖 #B22222 XXXXXXXX 深红色 #8B0000 XXXXXXXX 栗色 #800000 XXXXXXXX 纯白 #FFFFFF XXXXXXXX 白烟 #F5F5F5 XXXXXXXX Gainsboro #DCDCDC XXXXXXXX 浅灰色 #D3D3D3 XXXXXXXX 银白色 #C0C0C0 XXXXXXXX 深灰色 #A9A9A9 XXXXXXXX 灰色 #808080 XXXXXXXX 暗淡灰 #696969 XXXXXXXX]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[链表]]></title>
    <url>%2F2018%2F05%2F08%2Fpost-C-%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[链表这个东西很奇妙！ 如果哪里写的不好，希望可以去Github上发给我。Github ： https://github.com/boxknight/link 1234567891011121314151617181920212223242526272829303132#ifndef LINK_H_#define LINK_H_ /** Copyright(c) 2018, KUN* All rights reserved.* 版本 1.0* 文件 链表* 使用方法 见文件* 完成日期 2018/05/04*///*************************************************************************************struct Link&#123; int obj; Link *next;&#125;;//*************************************************************************************Link MYLINK(int N); //建立长度为N的链表Link INSERT(Link&amp; HAND, int N, Link&amp; IN); //在N位置插入一个节点Link INSERT(Link&amp; HAND, Link&amp; IN, int N); //在N位置插入一个链表bool DELETE(Link&amp;, int ST, int FI); //删除ST位置至FI位置的节点int INQUIRE(Link, int N); //查询N位置节点的数据bool CHANGE(Link&amp;, int N, int OBJ); //更改N位置节点的数据//*************************************************************************************#endifcode 上述是关于链表需要使用的函数的函数声明，下面是上述函数的实现代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;stdlib.h&gt;#include"link.h"//*************************************************************************************Link MYLINK(int N)&#123; int i; Link HAND; Link TEMP; N -= 1; HAND.next = (Link*)malloc((int)(sizeof(int) + sizeof(Link*))); TEMP.next = HAND.next; for (i = 1; i &lt; N; i++) &#123; TEMP.next-&gt;next = (Link*)malloc((int)(sizeof(int) + sizeof(Link*))); TEMP.next = TEMP.next-&gt;next; &#125; return HAND;&#125;//建立长度为N的链表//*************************************************************************************Link INSERT(Link&amp; HAND, int N, Link&amp; IN)&#123; int num; Link TEMP; Link* temp; temp = NULL; TEMP = HAND; for (num = 0; num &lt; N + 1; num++) &#123; if (num = N - 1) &#123; temp = TEMP.next; TEMP.next = &amp;IN; &#125; if (num = N) IN.next = temp; TEMP.next = TEMP.next-&gt;next; &#125; return HAND;&#125;//在N位置插入一个节点//*************************************************************************************Link INSERT(Link&amp; HAND, Link&amp; IN, int N)&#123; int num; Link TEMP; Link* temp; TEMP = HAND; for (num = 1; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; temp = TEMP.next; TEMP.next = &amp;IN; for (; TEMP.next == NULL;) TEMP.next = TEMP.next-&gt;next; TEMP.next = temp; return HAND;&#125;//在N位置插入一个链表//*************************************************************************************bool DELETE(Link&amp; HAND, int ST, int FI)&#123; int num; Link TEMP, TEMP_FI; TEMP = HAND; for (num = 1; num &lt; ST; num++) TEMP.next = TEMP.next-&gt;next; TEMP_FI = TEMP; for (; num&lt;FI; num++) TEMP.next = TEMP.next-&gt;next; TEMP_FI.next = TEMP.next; return 1;&#125;//删除ST位置至FI位置的节点//*************************************************************************************int INQUIRE(Link HAND, int N)&#123; int num; Link TEMP; TEMP = HAND; for (num = 1; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; return TEMP.obj;&#125;//查询N位置节点的数据//*************************************************************************************bool CHANGE(Link&amp; HAND, int N, int OBJ)&#123; int num; Link TEMP; TEMP = HAND; if (N == 1) HAND.obj = OBJ; if (N != 1) &#123; for (num = 2; num &lt; N; num++) TEMP.next = TEMP.next-&gt;next; TEMP.next-&gt;obj = OBJ; &#125; return 1;&#125;//更改N位置节点的数据 /* * Copyright(c) 2018, KUN * All rights reserved. * 版本 1.0 * 文件 链表 * 使用方法 见文件 * 完成日期 2018/05/04 * 头文件 link.h */code]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
